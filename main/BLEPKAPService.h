/**
 * Copyright (c) 2020 Jay Logue
 * All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

/**
 *   @file
 *         An implementation of the BLE Public Key Authenticated Pairing protocol
 *         for the Nordic nRF5 SDK.
 */

#ifndef BLEPKAPSERVICE_H_
#define BLEPKAPSERVICE_H_

class BLEPKAPService final
{
public:
    static ret_code_t Init(uint16_t deviceKeyId, const uint8_t * devicePrivKey, size_t devicePrivKeyLen);
    static ret_code_t RunMainLoopActions(void);

    /** Callbacks generated by the BLEPKAPService class.
     * 
     * Applications MUST provide implementations of these methods to support
     * operation of the BLE-PKAP service.
     */
    struct Callback
    {
        static bool IsKnownPeerKeyId(uint16_t keyId);
        static ret_code_t GetPeerPublicKey(uint16_t keyId, const uint8_t * & key, size_t & keySize);
    };

private:
    static void HandleBLEEvent(ble_evt_t const * bleEvent, void * context);
    static ble_gap_lesc_oob_data_t *GetPeerLESCOOBData(uint16_t conn_handle);
    static void ClearAuthState(void);
};

/** Compile-time configuration options for the BLEPKAPService class
 * 
 * @{
 */

/** Observer priority for BLE-PKAP Service
 */
#ifndef BLE_PKAP_SERVICE_OBSERVER_PRIO
#define BLE_PKAP_SERVICE_OBSERVER_PRIO 3
#endif // BLE_PKAP_SERVICE_OBSERVER_PRIO

/**@} */

#endif // BLEPKAPSERVICE_H_
