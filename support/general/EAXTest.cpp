/*
 *
 *    Copyright (c) 2021 Jay Logue
 *    Copyright (c) 2017 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      Code for testing EAX implementations.
 *
 */

#include <string.h>
#include <inttypes.h>
#include <assert.h>

#include "EAX.h"

namespace {

struct TestVector
{
    const uint8_t * MSG;
    size_t MSGLen;
    const uint8_t * KEY;
    size_t KEYLen;
    const uint8_t * NONCE;
    size_t NONCELen;
    const uint8_t * HEADER;
    size_t HEADERLen;
    const uint8_t * CIPHER;
    size_t CIPHERLen;
};

/*
 * Test Vectors for EAX using AES-128 block cipher.
 *
 * These are taken from the paper "The EAX Mode of Operation" (January 18, 2004) by BELLARE, ROGAWAY and WAGNER.
 * 
 * https://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
 */

uint8_t sTV0_MSG[] = {  };
uint8_t sTV0_KEY[] = { 0x23, 0x39, 0x52, 0xDE, 0xE4, 0xD5, 0xED, 0x5F, 0x9B, 0x9C, 0x6D, 0x6F, 0xF8, 0x0F, 0xF4, 0x78 };
uint8_t sTV0_NONCE[] = { 0x62, 0xEC, 0x67, 0xF9, 0xC3, 0xA4, 0xA4, 0x07, 0xFC, 0xB2, 0xA8, 0xC4, 0x90, 0x31, 0xA8, 0xB3 };
uint8_t sTV0_HEADER[] = { 0x6B, 0xFB, 0x91, 0x4F, 0xD0, 0x7E, 0xAE, 0x6B };
uint8_t sTV0_CIPHER[] = { 0xE0, 0x37, 0x83, 0x0E, 0x83, 0x89, 0xF2, 0x7B, 0x02, 0x5A, 0x2D, 0x65, 0x27, 0xE7, 0x9D, 0x01 };
uint8_t sTV1_MSG[] = { 0xF7, 0xFB };
uint8_t sTV1_KEY[] = { 0x91, 0x94, 0x5D, 0x3F, 0x4D, 0xCB, 0xEE, 0x0B, 0xF4, 0x5E, 0xF5, 0x22, 0x55, 0xF0, 0x95, 0xA4 };
uint8_t sTV1_NONCE[] = { 0xBE, 0xCA, 0xF0, 0x43, 0xB0, 0xA2, 0x3D, 0x84, 0x31, 0x94, 0xBA, 0x97, 0x2C, 0x66, 0xDE, 0xBD };
uint8_t sTV1_HEADER[] = { 0xFA, 0x3B, 0xFD, 0x48, 0x06, 0xEB, 0x53, 0xFA };
uint8_t sTV1_CIPHER[] = { 0x19, 0xDD, 0x5C, 0x4C, 0x93, 0x31, 0x04, 0x9D, 0x0B, 0xDA, 0xB0, 0x27, 0x74, 0x08, 0xF6, 0x79, 0x67, 0xE5 };
uint8_t sTV2_MSG[] = { 0x1A, 0x47, 0xCB, 0x49, 0x33 };
uint8_t sTV2_KEY[] = { 0x01, 0xF7, 0x4A, 0xD6, 0x40, 0x77, 0xF2, 0xE7, 0x04, 0xC0, 0xF6, 0x0A, 0xDA, 0x3D, 0xD5, 0x23 };
uint8_t sTV2_NONCE[] = { 0x70, 0xC3, 0xDB, 0x4F, 0x0D, 0x26, 0x36, 0x84, 0x00, 0xA1, 0x0E, 0xD0, 0x5D, 0x2B, 0xFF, 0x5E };
uint8_t sTV2_HEADER[] = { 0x23, 0x4A, 0x34, 0x63, 0xC1, 0x26, 0x4A, 0xC6 };
uint8_t sTV2_CIPHER[] = { 0xD8, 0x51, 0xD5, 0xBA, 0xE0, 0x3A, 0x59, 0xF2, 0x38, 0xA2, 0x3E, 0x39, 0x19, 0x9D, 0xC9, 0x26, 0x66, 0x26, 0xC4, 0x0F, 0x80 };
uint8_t sTV3_MSG[] = { 0x48, 0x1C, 0x9E, 0x39, 0xB1 };
uint8_t sTV3_KEY[] = { 0xD0, 0x7C, 0xF6, 0xCB, 0xB7, 0xF3, 0x13, 0xBD, 0xDE, 0x66, 0xB7, 0x27, 0xAF, 0xD3, 0xC5, 0xE8 };
uint8_t sTV3_NONCE[] = { 0x84, 0x08, 0xDF, 0xFF, 0x3C, 0x1A, 0x2B, 0x12, 0x92, 0xDC, 0x19, 0x9E, 0x46, 0xB7, 0xD6, 0x17 };
uint8_t sTV3_HEADER[] = { 0x33, 0xCC, 0xE2, 0xEA, 0xBF, 0xF5, 0xA7, 0x9D };
uint8_t sTV3_CIPHER[] = { 0x63, 0x2A, 0x9D, 0x13, 0x1A, 0xD4, 0xC1, 0x68, 0xA4, 0x22, 0x5D, 0x8E, 0x1F, 0xF7, 0x55, 0x93, 0x99, 0x74, 0xA7, 0xBE, 0xDE };
uint8_t sTV4_MSG[] = { 0x40, 0xD0, 0xC0, 0x7D, 0xA5, 0xE4 };
uint8_t sTV4_KEY[] = { 0x35, 0xB6, 0xD0, 0x58, 0x00, 0x05, 0xBB, 0xC1, 0x2B, 0x05, 0x87, 0x12, 0x45, 0x57, 0xD2, 0xC2 };
uint8_t sTV4_NONCE[] = { 0xFD, 0xB6, 0xB0, 0x66, 0x76, 0xEE, 0xDC, 0x5C, 0x61, 0xD7, 0x42, 0x76, 0xE1, 0xF8, 0xE8, 0x16 };
uint8_t sTV4_HEADER[] = { 0xAE, 0xB9, 0x6E, 0xAE, 0xBE, 0x29, 0x70, 0xE9 };
uint8_t sTV4_CIPHER[] = { 0x07, 0x1D, 0xFE, 0x16, 0xC6, 0x75, 0xCB, 0x06, 0x77, 0xE5, 0x36, 0xF7, 0x3A, 0xFE, 0x6A, 0x14, 0xB7, 0x4E, 0xE4, 0x98, 0x44, 0xDD };
uint8_t sTV5_MSG[] = { 0x4D, 0xE3, 0xB3, 0x5C, 0x3F, 0xC0, 0x39, 0x24, 0x5B, 0xD1, 0xFB, 0x7D };
uint8_t sTV5_KEY[] = { 0xBD, 0x8E, 0x6E, 0x11, 0x47, 0x5E, 0x60, 0xB2, 0x68, 0x78, 0x4C, 0x38, 0xC6, 0x2F, 0xEB, 0x22 };
uint8_t sTV5_NONCE[] = { 0x6E, 0xAC, 0x5C, 0x93, 0x07, 0x2D, 0x8E, 0x85, 0x13, 0xF7, 0x50, 0x93, 0x5E, 0x46, 0xDA, 0x1B };
uint8_t sTV5_HEADER[] = { 0xD4, 0x48, 0x2D, 0x1C, 0xA7, 0x8D, 0xCE, 0x0F };
uint8_t sTV5_CIPHER[] = { 0x83, 0x5B, 0xB4, 0xF1, 0x5D, 0x74, 0x3E, 0x35, 0x0E, 0x72, 0x84, 0x14, 0xAB, 0xB8, 0x64, 0x4F, 0xD6, 0xCC, 0xB8, 0x69, 0x47, 0xC5, 0xE1, 0x05, 0x90, 0x21, 0x0A, 0x4F };
uint8_t sTV6_MSG[] = { 0x8B, 0x0A, 0x79, 0x30, 0x6C, 0x9C, 0xE7, 0xED, 0x99, 0xDA, 0xE4, 0xF8, 0x7F, 0x8D, 0xD6, 0x16, 0x36 };
uint8_t sTV6_KEY[] = { 0x7C, 0x77, 0xD6, 0xE8, 0x13, 0xBE, 0xD5, 0xAC, 0x98, 0xBA, 0xA4, 0x17, 0x47, 0x7A, 0x2E, 0x7D };
uint8_t sTV6_NONCE[] = { 0x1A, 0x8C, 0x98, 0xDC, 0xD7, 0x3D, 0x38, 0x39, 0x3B, 0x2B, 0xF1, 0x56, 0x9D, 0xEE, 0xFC, 0x19 };
uint8_t sTV6_HEADER[] = { 0x65, 0xD2, 0x01, 0x79, 0x90, 0xD6, 0x25, 0x28 };
uint8_t sTV6_CIPHER[] = { 0x02, 0x08, 0x3E, 0x39, 0x79, 0xDA, 0x01, 0x48, 0x12, 0xF5, 0x9F, 0x11, 0xD5, 0x26, 0x30, 0xDA, 0x30, 0x13, 0x73, 0x27, 0xD1, 0x06, 0x49, 0xB0, 0xAA, 0x6E, 0x1C, 0x18, 0x1D, 0xB6, 0x17, 0xD7, 0xF2 };
uint8_t sTV7_MSG[] = { 0x1B, 0xDA, 0x12, 0x2B, 0xCE, 0x8A, 0x8D, 0xBA, 0xF1, 0x87, 0x7D, 0x96, 0x2B, 0x85, 0x92, 0xDD, 0x2D, 0x56 };
uint8_t sTV7_KEY[] = { 0x5F, 0xFF, 0x20, 0xCA, 0xFA, 0xB1, 0x19, 0xCA, 0x2F, 0xC7, 0x35, 0x49, 0xE2, 0x0F, 0x5B, 0x0D };
uint8_t sTV7_NONCE[] = { 0xDD, 0xE5, 0x9B, 0x97, 0xD7, 0x22, 0x15, 0x6D, 0x4D, 0x9A, 0xFF, 0x2B, 0xC7, 0x55, 0x98, 0x26 };
uint8_t sTV7_HEADER[] = { 0x54, 0xB9, 0xF0, 0x4E, 0x6A, 0x09, 0x18, 0x9A };
uint8_t sTV7_CIPHER[] = { 0x2E, 0xC4, 0x7B, 0x2C, 0x49, 0x54, 0xA4, 0x89, 0xAF, 0xC7, 0xBA, 0x48, 0x97, 0xED, 0xCD, 0xAE, 0x8C, 0xC3, 0x3B, 0x60, 0x45, 0x05, 0x99, 0xBD, 0x02, 0xC9, 0x63, 0x82, 0x90, 0x2A, 0xEF, 0x7F, 0x83, 0x2A };
uint8_t sTV8_MSG[] = { 0x6C, 0xF3, 0x67, 0x20, 0x87, 0x2B, 0x85, 0x13, 0xF6, 0xEA, 0xB1, 0xA8, 0xA4, 0x44, 0x38, 0xD5, 0xEF, 0x11 };
uint8_t sTV8_KEY[] = { 0xA4, 0xA4, 0x78, 0x2B, 0xCF, 0xFD, 0x3E, 0xC5, 0xE7, 0xEF, 0x6D, 0x8C, 0x34, 0xA5, 0x61, 0x23 };
uint8_t sTV8_NONCE[] = { 0xB7, 0x81, 0xFC, 0xF2, 0xF7, 0x5F, 0xA5, 0xA8, 0xDE, 0x97, 0xA9, 0xCA, 0x48, 0xE5, 0x22, 0xEC };
uint8_t sTV8_HEADER[] = { 0x89, 0x9A, 0x17, 0x58, 0x97, 0x56, 0x1D, 0x7E };
uint8_t sTV8_CIPHER[] = { 0x0D, 0xE1, 0x8F, 0xD0, 0xFD, 0xD9, 0x1E, 0x7A, 0xF1, 0x9F, 0x1D, 0x8E, 0xE8, 0x73, 0x39, 0x38, 0xB1, 0xE8, 0xE7, 0xF6, 0xD2, 0x23, 0x16, 0x18, 0x10, 0x2F, 0xDB, 0x7F, 0xE5, 0x5F, 0xF1, 0x99, 0x17, 0x00 };
uint8_t sTV9_MSG[] = { 0xCA, 0x40, 0xD7, 0x44, 0x6E, 0x54, 0x5F, 0xFA, 0xED, 0x3B, 0xD1, 0x2A, 0x74, 0x0A, 0x65, 0x9F, 0xFB, 0xBB, 0x3C, 0xEA, 0xB7 };
uint8_t sTV9_KEY[] = { 0x83, 0x95, 0xFC, 0xF1, 0xE9, 0x5B, 0xEB, 0xD6, 0x97, 0xBD, 0x01, 0x0B, 0xC7, 0x66, 0xAA, 0xC3 };
uint8_t sTV9_NONCE[] = { 0x22, 0xE7, 0xAD, 0xD9, 0x3C, 0xFC, 0x63, 0x93, 0xC5, 0x7E, 0xC0, 0xB3, 0xC1, 0x7D, 0x6B, 0x44 };
uint8_t sTV9_HEADER[] = { 0x12, 0x67, 0x35, 0xFC, 0xC3, 0x20, 0xD2, 0x5A };
uint8_t sTV9_CIPHER[] = { 0xCB, 0x89, 0x20, 0xF8, 0x7A, 0x6C, 0x75, 0xCF, 0xF3, 0x96, 0x27, 0xB5, 0x6E, 0x3E, 0xD1, 0x97, 0xC5, 0x52, 0xD2, 0x95, 0xA7, 0xCF, 0xC4, 0x6A, 0xFC, 0x25, 0x3B, 0x46, 0x52, 0xB1, 0xAF, 0x37, 0x95, 0xB1, 0x24, 0xAB, 0x6E };

static TestVector sTestVectors_EAX128[] = {
    {
        .MSG = sTV0_MSG,
        .MSGLen = 0,
        .KEY = sTV0_KEY,
        .KEYLen = 16,
        .NONCE = sTV0_NONCE,
        .NONCELen = 16,
        .HEADER = sTV0_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV0_CIPHER,
        .CIPHERLen = 16,
    },
    {
        .MSG = sTV1_MSG,
        .MSGLen = 2,
        .KEY = sTV1_KEY,
        .KEYLen = 16,
        .NONCE = sTV1_NONCE,
        .NONCELen = 16,
        .HEADER = sTV1_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV1_CIPHER,
        .CIPHERLen = 18,
    },
    {
        .MSG = sTV2_MSG,
        .MSGLen = 5,
        .KEY = sTV2_KEY,
        .KEYLen = 16,
        .NONCE = sTV2_NONCE,
        .NONCELen = 16,
        .HEADER = sTV2_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV2_CIPHER,
        .CIPHERLen = 21,
    },
    {
        .MSG = sTV3_MSG,
        .MSGLen = 5,
        .KEY = sTV3_KEY,
        .KEYLen = 16,
        .NONCE = sTV3_NONCE,
        .NONCELen = 16,
        .HEADER = sTV3_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV3_CIPHER,
        .CIPHERLen = 21,
    },
    {
        .MSG = sTV4_MSG,
        .MSGLen = 6,
        .KEY = sTV4_KEY,
        .KEYLen = 16,
        .NONCE = sTV4_NONCE,
        .NONCELen = 16,
        .HEADER = sTV4_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV4_CIPHER,
        .CIPHERLen = 22,
    },
    {
        .MSG = sTV5_MSG,
        .MSGLen = 12,
        .KEY = sTV5_KEY,
        .KEYLen = 16,
        .NONCE = sTV5_NONCE,
        .NONCELen = 16,
        .HEADER = sTV5_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV5_CIPHER,
        .CIPHERLen = 28,
    },
    {
        .MSG = sTV6_MSG,
        .MSGLen = 17,
        .KEY = sTV6_KEY,
        .KEYLen = 16,
        .NONCE = sTV6_NONCE,
        .NONCELen = 16,
        .HEADER = sTV6_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV6_CIPHER,
        .CIPHERLen = 33,
    },
    {
        .MSG = sTV7_MSG,
        .MSGLen = 18,
        .KEY = sTV7_KEY,
        .KEYLen = 16,
        .NONCE = sTV7_NONCE,
        .NONCELen = 16,
        .HEADER = sTV7_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV7_CIPHER,
        .CIPHERLen = 34,
    },
    {
        .MSG = sTV8_MSG,
        .MSGLen = 18,
        .KEY = sTV8_KEY,
        .KEYLen = 16,
        .NONCE = sTV8_NONCE,
        .NONCELen = 16,
        .HEADER = sTV8_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV8_CIPHER,
        .CIPHERLen = 34,
    },
    {
        .MSG = sTV9_MSG,
        .MSGLen = 21,
        .KEY = sTV9_KEY,
        .KEYLen = 16,
        .NONCE = sTV9_NONCE,
        .NONCELen = 16,
        .HEADER = sTV9_HEADER,
        .HEADERLen = 8,
        .CIPHER = sTV9_CIPHER,
        .CIPHERLen = 37,
    },
};

size_t sNumTestVectors_EAX128 = sizeof(sTestVectors_EAX128) / sizeof(TestVector);

}

void TestEAX128(EAX & eax)
{
    for (size_t i = 0; i < sNumTestVectors_EAX128; i++)
    {
        const TestVector & tv = sTestVectors_EAX128[i];
        uint8_t buf[tv.CIPHERLen];
        const uint8_t * const tag = tv.CIPHER + tv.MSGLen;
        const size_t tagLen = tv.CIPHERLen - tv.MSGLen;

        if (i > 0)
        {
            eax.Reset();
        }

        // Test encryption
        eax.SetKey(tv.KEY, tv.KEYLen);
        eax.Start(tv.NONCE, tv.NONCELen);
        eax.InjectHeader(tv.HEADER, tv.HEADERLen);
        eax.Encrypt(tv.MSG, tv.MSGLen, buf);
        assert(memcmp(buf, tv.CIPHER, tv.MSGLen) == 0);
        if (tagLen > 0)
        {
            eax.GetTag(buf, tagLen);
            assert(memcmp(buf, tag, tagLen) == 0);
            assert(eax.CheckTag(tag, tagLen) == true);
        }

        // Test decryption
        eax.Reset();
        eax.SetKey(tv.KEY, tv.KEYLen);
        eax.Start(tv.NONCE, tv.NONCELen);
        eax.InjectHeader(tv.HEADER, tv.HEADERLen);
        eax.Decrypt(tv.CIPHER, tv.MSGLen, buf);
        assert(memcmp(buf, tv.MSG, tv.MSGLen) == 0);
        if (tagLen > 0)
        {
            eax.GetTag(buf, tagLen);
            assert(memcmp(buf, tag, tagLen) == 0);
            assert(eax.CheckTag(tag, tagLen) == true);
        }

#if !CONFIG_EAX_NO_CHUNK

        // Test chunking of the plain/ciphertext
        for (size_t chunkLen = 1; chunkLen < tv.MSGLen; chunkLen++)
        {
            // Encryption
            eax.Reset();
            eax.SetKey(tv.KEY, tv.KEYLen);
            eax.Start(tv.NONCE, tv.NONCELen);
            eax.InjectHeader(tv.HEADER, tv.HEADERLen);
            for (size_t remainingLen = tv.MSGLen; remainingLen > 0; )
            {
                size_t len = (remainingLen < chunkLen) ? remainingLen : chunkLen;
                eax.Encrypt(tv.MSG + tv.MSGLen - remainingLen, len, buf + tv.MSGLen - remainingLen);
                remainingLen -= len;
            }
            assert(memcmp(buf, tv.CIPHER, tv.MSGLen) == 0);
            if (tagLen > 0)
            {
                eax.GetTag(buf, tagLen);
                assert(memcmp(buf, tag, tagLen) == 0);
                assert(eax.CheckTag(tag, tagLen) == true);
            }

            // Decryption
            eax.Reset();
            eax.SetKey(tv.KEY, tv.KEYLen);
            eax.Start(tv.NONCE, tv.NONCELen);
            eax.InjectHeader(tv.HEADER, tv.HEADERLen);
            for (size_t remainingLen = tv.MSGLen; remainingLen > 0; )
            {
                size_t len = (remainingLen < chunkLen) ? remainingLen : chunkLen;
                eax.Decrypt(tv.CIPHER + tv.MSGLen - remainingLen, len, buf + tv.MSGLen - remainingLen);
                remainingLen -= len;
            }
            assert(memcmp(buf, tv.MSG, tv.MSGLen) == 0);
            if (tagLen > 0)
            {
                eax.GetTag(buf, tagLen);
                assert(memcmp(buf, tag, tagLen) == 0);
                assert(eax.CheckTag(tag, tagLen) == true);
            }
        }

        // Test chunking of the header
        for (size_t chunkLen = 1; chunkLen < tv.HEADERLen; chunkLen++)
        {
            // Encryption
            eax.Reset();
            eax.SetKey(tv.KEY, tv.KEYLen);
            eax.Start(tv.NONCE, tv.NONCELen);
            for (size_t remainingLen = tv.HEADERLen; remainingLen > 0; )
            {
                size_t len = (remainingLen < chunkLen) ? remainingLen : chunkLen;
                eax.InjectHeader(tv.HEADER + tv.HEADERLen - remainingLen, len);
                remainingLen -= len;
            }
            eax.Encrypt(tv.MSG, tv.MSGLen, buf);
            assert(memcmp(buf, tv.CIPHER, tv.MSGLen) == 0);
            if (tagLen > 0)
            {
                eax.GetTag(buf, tagLen);
                assert(memcmp(buf, tag, tagLen) == 0);
                assert(eax.CheckTag(tag, tagLen) == true);
            }

            // Decryption
            eax.Reset();
            eax.SetKey(tv.KEY, tv.KEYLen);
            eax.Start(tv.NONCE, tv.NONCELen);
            for (size_t remainingLen = tv.HEADERLen; remainingLen > 0; )
            {
                size_t len = (remainingLen < chunkLen) ? remainingLen : chunkLen;
                eax.InjectHeader(tv.HEADER + tv.HEADERLen - remainingLen, len);
                remainingLen -= len;
            }
            eax.Decrypt(tv.CIPHER, tv.MSGLen, buf);
            assert(memcmp(buf, tv.MSG, tv.MSGLen) == 0);
            if (tagLen > 0)
            {
                eax.GetTag(buf, tagLen);
                assert(memcmp(buf, tag, tagLen) == 0);
                assert(eax.CheckTag(tag, tagLen) == true);
            }
        }

#endif // !CONFIG_EAX_NO_CHUNK

    }
}
