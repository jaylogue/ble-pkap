/**
 * Copyright (c) 2021 Jay Logue
 * All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

/**
 *   @file
 *         A simple BLE application based on the Nordic SoftDevice and nRF5 SDK.
 */

#ifndef SIMPLEBLEAPP_H_
#define SIMPLEBLEAPP_H_

#include <ble.h>
#include <ble_gap.h>
#include <ble_advdata.h>

#include <SimpleEventObserver.h>

namespace nrf5utils {

/** Simple BLE Application
 * 
 * Implements the core logic for a general-purpose BLE peripheral application
 * based on the Nordic SoftDevice and nRF5 SDK.
 */
class SimpleBLEApp final
{
public:
    static ret_code_t Init(void);
    static ret_code_t SetDeviceName(const char * devName, bool makeUnique = false);
    static void SetAdvertisingRate(uint32_t advRateMS);
    static uint32_t GetAdvertisingRate(void);
    static void SetAdvertisedServiceUUID(ble_uuid_t advServiceUUID);
    static void ClearAdvertisedServiceUUID(void);
    static void SetAdvertisedManufacturingData(const ble_advdata_manuf_data_t & manufData);
    static void ClearAdvertisedManufacturingData(void);
    static ret_code_t StartAdvertising(void);
    static ret_code_t StopAdvertising(void);
    static bool IsAdvertising(void);
    static ret_code_t RunMainLoopActions(void);

    /** Events generated by the SimpleBLEApp class.
     */
    struct Event final
    {
        // handler signature: void OnAdvertisingStarted(void)
        static SimpleEventObserver::Event<> OnAdvertisingStarted;

        // handler signature: void OnAdvertisingStopped(void)
        static SimpleEventObserver::Event<> OnAdvertisingStopped;

        // handler signature: void OnConnectionEstablished(uint16_t conHandle, const ble_gap_evt_connected_t * conEvent)
        static SimpleEventObserver::Event<uint16_t, const ble_gap_evt_connected_t *> OnConnectionEstablished;

        // handler signature: void OnConnectionTerminated(uint16_t conHandle, const ble_gap_evt_disconnected_t * disconEvent)
        static SimpleEventObserver::Event<uint16_t, const ble_gap_evt_disconnected_t *> OnConnectionTerminated;

        // handler signature: void OnPairingRequested(uint16_t conHandle, const ble_gap_evt_sec_params_request_t * secParamsReq, uint8_t & secStatus, ble_gap_sec_params_t * secParamsReply)
        static SimpleEventObserver::Event<uint16_t, const ble_gap_evt_sec_params_request_t *, uint8_t&, ble_gap_sec_params_t *> OnPairingRequested;

        // handler signature: void OnPairingCompleted(uint16_t conHandle, const ble_gap_evt_auth_status_t * authStatus)
        static SimpleEventObserver::Event<uint16_t, const ble_gap_evt_auth_status_t *> OnPairingCompleted;
    };

private:
    static void HandleBLEEvent(ble_evt_t const * bleEvent, void * context);

    SimpleBLEApp() = delete;
    ~SimpleBLEApp() = delete;
};

} // namespace nrf5utils


/** Compile-time configuration options for the SimpleBLEApp class
 * @{ */

/** Initialize the SoftDevice during SimpleBLEApp initialization.
 */
#ifndef SIMPLE_BLE_APP_INIT_SOFTDEVICE
#define SIMPLE_BLE_APP_INIT_SOFTDEVICE 1
#endif // SIMPLE_BLE_APP_INIT_SOFTDEVICE

/** Max device name length.
 */
#ifndef SIMPLE_BLE_APP_DEVICE_NAME_MAX_LENGTH
#define SIMPLE_BLE_APP_DEVICE_NAME_MAX_LENGTH 32
#endif // SIMPLE_BLE_APP_DEVICE_NAME_MAX_LENGTH

/** Default device name
 *  Set this to an empty string to disable configuration of a default device name.
 */
#ifndef SIMPLE_BLE_APP_DEFAULT_DEVICE_NAME
#define SIMPLE_BLE_APP_DEFAULT_DEVICE_NAME "BLEAPP-"
#endif // SIMPLE_BLE_APP_DEFAULT_DEVICE_NAME

/** Enable appending a unique string to the default device name based on the device's MAC address.
 */
#ifndef SIMPLE_BLE_APP_UNIQUE_DEVICE_NAME
#define SIMPLE_BLE_APP_UNIQUE_DEVICE_NAME 1
#endif // SIMPLE_BLE_APP_UNIQUE_DEVICE_NAME

/** Default advertising rate (in ms)
 */
#ifndef SIMPLE_BLE_APP_DEFAULT_ADV_RATE
#define SIMPLE_BLE_APP_DEFAULT_ADV_RATE 500
#endif // SIMPLE_BLE_APP_DEFAULT_ADV_RATE

/** Controls inclusion of device name in advertising data.
 *  Set to one of @ref ble_advdata_name_type_t enumeration values
 */
#ifndef SIMPLE_BLE_APP_ADV_NAME_TYPE
#define SIMPLE_BLE_APP_ADV_NAME_TYPE BLE_ADVDATA_FULL_NAME
#endif // SIMPLE_BLE_APP_ADV_NAME_TYPE

/** Enable LE Secure Connections Pairing
 */
#ifndef SIMPLE_BLE_APP_LESC_PAIRING
#define SIMPLE_BLE_APP_LESC_PAIRING 1
#endif // SIMPLE_BLE_APP_LESC_PAIRING

/** External pairing support
 * 
 * Disable all pairing support code in SimpleBLEApp, allowing pairing to be implemented in an external module.
 */
#ifndef SIMPLE_BLE_APP_EXTERNAL_PAIRING
#define SIMPLE_BLE_APP_EXTERNAL_PAIRING 0
#endif // SIMPLE_BLE_APP_EXTERNAL_PAIRING

/** Observer priority for BLE application
 */
#ifndef SIMPLE_BLE_APP_OBSERVER_PRIO
#define SIMPLE_BLE_APP_OBSERVER_PRIO 3
#endif // SIMPLE_BLE_APP_OBSERVER_PRIO

/**@} */

#endif // SIMPLEBLEAPP_H_
